From 982b1c008192638d4e5db3b57754232921270690 Mon Sep 17 00:00:00 2001
From: Hsieh-Tseng Shen <woodrow.shen@canonical.com>
Date: Wed, 10 Jun 2020 18:02:21 +0800
Subject: [PATCH 1/4] Add gpt_disk_get_partition_info_udev() to get partition
 guid and size

This is one of patchset to avoid using open disk directly, and
gpt_disk_get_partition_info_udev func tries to get partition UUID for
signature and others (offset and size) from udev (/run/udev/data) to
parse what original func gpt_disk_get_partition_info needed.
---
 src/gpt.c | 84 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/gpt.h |  6 ++++
 2 files changed, 90 insertions(+)

diff --git a/src/gpt.c b/src/gpt.c
index 823edba..8badcad 100644
--- a/src/gpt.c
+++ b/src/gpt.c
@@ -23,11 +23,16 @@
 #include <unistd.h>
 
 #include "efivar.h"
+#include "guid.h"
 
 #ifndef BLKGETLASTSECT
 #define BLKGETLASTSECT _IO(0x12,108) /* get last sector of block device */
 #endif
 
+#ifndef major
+#include <sys/sysmacros.h>
+#endif
+
 struct blkdev_ioctl_param {
 	unsigned int block;
 	size_t content_length;
@@ -731,6 +736,85 @@ gpt_disk_get_partition_info(int fd, uint32_t num, uint64_t * start,
 	return rc;
 }
 
+/************************************************************
+ * gpt_disk_get_partition_info_udev()
+ * Requires:
+ *  - start, size, signature, mbr_type, signature_type
+ * Modifies: all these
+ * Returns:
+ *  0 on success
+ *  non-zero on failure
+ *
+ ************************************************************/
+int NONNULL(3, 4, 5, 6, 7) HIDDEN
+gpt_disk_get_partition_info_udev(const char *devpath, uint32_t num, uint64_t * start,
+			    uint64_t * size, uint8_t *signature,
+			    uint8_t * mbr_type, uint8_t * signature_type,
+			    int ignore_pmbr_error __attribute__((__unused__)))
+{
+	int rc = 0;
+
+	*mbr_type = 0x02;
+	*signature_type = 0x02;
+
+	FILE *fd;
+	enum { MAXC = 64 };
+	unsigned int guid_len = sizeof("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx");
+	char buf[MAXC];
+	char value_buf[MAXC];
+	struct stat statbuf = { 0, };
+	efi_guid_t guid;
+
+	rc = stat(devpath, &statbuf);
+	if (rc < 0)
+		return -1;
+	if (!S_ISBLK(statbuf.st_mode)) {
+		errno = EINVAL;
+		return -1;
+	}
+
+	snprintf(buf, MAXC, "/run/udev/data/b%d:%d", major(statbuf.st_rdev), minor(statbuf.st_rdev));
+
+	fd = fopen(buf, "r");
+	if (NULL == fd) {
+		return -1;
+	}
+	while (fgets(buf, MAXC, fd)) {
+		if (strstr(buf, "ID_PART_ENTRY_UUID")) {
+			snprintf(value_buf, guid_len+2, "%s", strchr(buf, '=')+1);
+			rc = text_to_guid(value_buf, &guid);
+
+			if (rc < 0) {
+				efi_error("partition %d is not valid", num);
+				errno = EINVAL;
+				fclose(fd);
+				return rc;
+			}
+			memset(signature, 0, 16);
+			memcpy(signature, (uint32_t*) &guid.a, 4);
+			memcpy(signature+4, (uint16_t*) &guid.b, 2);
+			memcpy(signature+6, (uint16_t*) &guid.c, 2);
+			memcpy(signature+8, (uint16_t*) &guid.d, 2);
+			memcpy(signature+10, (uint8_t*) &guid.e[0], 1);
+			memcpy(signature+11, (uint8_t*) &guid.e[1], 1);
+			memcpy(signature+12, (uint8_t*) &guid.e[2], 1);
+			memcpy(signature+13, (uint8_t*) &guid.e[3], 1);
+			memcpy(signature+14, (uint8_t*) &guid.e[4], 1);
+			memcpy(signature+15, (uint8_t*) &guid.e[5], 1);
+		}
+		if (strstr(buf, "ID_PART_ENTRY_OFFSET")) {
+			snprintf(value_buf, MAXC, "%s", strchr(buf, '=')+1);
+			*start = atoi(value_buf);
+		}
+		if (strstr(buf, "ID_PART_ENTRY_SIZE")) {
+			snprintf(value_buf, MAXC, "%s", strchr(buf, '=')+1);
+			*size = atoi(value_buf);
+		}
+	}
+	fclose(fd);
+
+	return rc;
+}
 /*
  * Overrides for Emacs so that we follow Linus's tabbing style.
  * Emacs will notice this stuff at the end of the file and automatically
diff --git a/src/gpt.h b/src/gpt.h
index 06696ac..1252a72 100644
--- a/src/gpt.h
+++ b/src/gpt.h
@@ -144,6 +144,12 @@ gpt_disk_get_partition_info (int fd, uint32_t num, uint64_t *start,
 			     uint8_t *mbr_type, uint8_t *signature_type,
 			     int ignore_pmbr_error, int logical_sector_size);
 
+extern int NONNULL(3, 4, 5, 6, 7) HIDDEN
+gpt_disk_get_partition_info_udev (const char *devpath, uint32_t num, uint64_t *start,
+			     uint64_t *size, uint8_t *signature,
+			     uint8_t *mbr_type, uint8_t *signature_type,
+			     int ignore_pmbr_error);
+
 #endif /* _EFIBOOT_GPT_H */
 
 // vim:fenc=utf-8:tw=75:noet
-- 
2.25.1

